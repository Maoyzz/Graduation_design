package myz.graduation_design.httpservice;import android.util.Log;import com.franmontiel.persistentcookiejar.ClearableCookieJar;import com.franmontiel.persistentcookiejar.PersistentCookieJar;import com.franmontiel.persistentcookiejar.cache.SetCookieCache;import com.franmontiel.persistentcookiejar.persistence.SharedPrefsCookiePersistor;import java.security.SecureRandom;import java.security.cert.CertificateException;import java.security.cert.X509Certificate;import java.util.concurrent.TimeUnit;import javax.net.ssl.HostnameVerifier;import javax.net.ssl.SSLContext;import javax.net.ssl.SSLSession;import javax.net.ssl.SSLSocketFactory;import javax.net.ssl.TrustManager;import javax.net.ssl.X509TrustManager;import myz.graduation_design.Utils.Constants;import myz.graduation_design.app.app;import myz.graduation_design.httpservice.convertadapter.PostConverterFactory;import okhttp3.HttpUrl;import okhttp3.OkHttpClient;import okhttp3.Request;import okhttp3.logging.HttpLoggingInterceptor;import retrofit2.Retrofit;import retrofit2.adapter.rxjava.RxJavaCallAdapterFactory;/** * Created by HP on 2017/11/7. */public class RetrofitServiceManager {    private static final int DEFAULT_TIME_OUT = 5;//超时时间 5s    private static final int DEFAULT_READ_TIME_OUT = 10;    private Retrofit mRetrofit;    private RetrofitServiceManager(){        // 创建 OKHttpClient        OkHttpClient.Builder builder = new OkHttpClient.Builder();        builder.connectTimeout(DEFAULT_TIME_OUT, TimeUnit.SECONDS);//连接超时时间        builder.writeTimeout(DEFAULT_READ_TIME_OUT,TimeUnit.SECONDS);//写操作 超时时间        builder.readTimeout(DEFAULT_READ_TIME_OUT, TimeUnit.SECONDS);//读操作超时时间        //////////////////log--start        HttpLoggingInterceptor loggingInterceptor = new HttpLoggingInterceptor(new HttpLoggingInterceptor.Logger() {            @Override            public void log(String message) {                //打印retrofit日志                Log.i("RetrofitLog","retrofitBack = "+message);            }        });        loggingInterceptor.setLevel(HttpLoggingInterceptor.Level.BODY);        builder.addInterceptor(loggingInterceptor);        /////////////////////////log--end        //Interceptor add sessionkey        HttpCommonInterceptor commonInterceptor = new HttpCommonInterceptor.Builder()                .build();        builder.addInterceptor(commonInterceptor);        builder.authenticator(new TokenAuthenticator());        //fix 401 unauthorised        //TODO cookieJar//        ClearableCookieJar cookieJar = new PersistentCookieJar(new SetCookieCache(), new SharedPrefsCookiePersistor(app.getInstance()));//        builder.cookieJar(cookieJar);        //builder.sslSocketFactory(createSSLSocketFactory()).hostnameVerifier(new TrustAllHostnameVerifier()).cookieJar(cookieJar);        //support all https        // 创建Retrofit        mRetrofit = new Retrofit.Builder()                .client(builder.build())                .addCallAdapterFactory(RxJavaCallAdapterFactory.create())                .addConverterFactory(PostConverterFactory.create())                .baseUrl(Constants.BASE_URL)                .build();    }    private static class SingletonHolder{        private static final RetrofitServiceManager INSTANCE = new RetrofitServiceManager();    }    /**     * 获取RetrofitServiceManager     * @return     */    public static RetrofitServiceManager getInstance(){        return SingletonHolder.INSTANCE;        //return new RetrofitServiceManager();    }    private static RetrofitServiceManager INSTANCE;    /**     * 获取对应的Service     * @param service Service 的 class     * @param <T>     * @return     */    public <T> T create(Class<T> service){        return mRetrofit.create(service);    }    private static class TrustAllCerts implements X509TrustManager {        @Override        public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException {}        @Override        public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException {}        @Override        public X509Certificate[] getAcceptedIssuers() {return new X509Certificate[0];}    }    private static class TrustAllHostnameVerifier implements HostnameVerifier {        @Override        public boolean verify(String hostname, SSLSession session) {            return true;        }    }    private static SSLSocketFactory createSSLSocketFactory() {        SSLSocketFactory ssfFactory = null;        try {            SSLContext sc = SSLContext.getInstance("TLS");            sc.init(null,  new TrustManager[] { new TrustAllCerts() }, new SecureRandom());            ssfFactory = sc.getSocketFactory();        } catch (Exception e) {        }        return ssfFactory;    }    public static Request addSessionKey(Request oldRequest){        HttpUrl.Builder authorizedUrlBuilder = oldRequest.url().newBuilder()                .scheme(oldRequest.url().scheme())                .host(oldRequest.url().host());        // 新的请求        Request.Builder requestBuilder =  oldRequest.newBuilder();        requestBuilder.method(oldRequest.method(),                oldRequest.body());        //Add new SessionKey        //TODO SessionKey//        String sessionKey = SharedPreferenceUtils.getString(QiyunApplication.getInstance(), SharedPreferenceUtils.SESSION_KEY, "");//        if (sessionKey != null && !"".equals(sessionKey)){//            requestBuilder.url(authorizedUrlBuilder.addEncodedQueryParameter("SessionKey",sessionKey).build());//        }        return requestBuilder.build();    }}